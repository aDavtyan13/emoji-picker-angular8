{"version":3,"file":"emoji-picker-lib.umd.js","sources":["ng://emoji-picker-lib/lib/emoji-picker-lib.service.ts","ng://emoji-picker-lib/lib/@core/services/emojis.shared.ts","ng://emoji-picker-lib/lib/emoji-picker-lib.component.ts","ng://emoji-picker-lib/lib/@theme/directives/outclick.directive.ts","ng://emoji-picker-lib/lib/@theme/directives/autofocus.directive.ts","ng://emoji-picker-lib/lib/emoji-picker-lib.module.ts","ng://emoji-picker-lib/lib/@core/interfaces/data.interface.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {IData} from './@core/interfaces/data.interface';\n\n@Injectable()\nexport class EmojiPickerService {\n  public getEmojis(): Promise<IData> {\n    return fetch('./assets/data/emojis.json').then(result => result.json());\n  }\n}\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\n\r\nimport {IData, IEmoji} from '../interfaces/data.interface';\r\nimport {EmojiPickerService} from '../../emoji-picker-lib.service';\r\n\r\n@Injectable()\r\nexport class EmojisSharedService {\r\n  private ctx: CanvasRenderingContext2D;\r\n  private emojis: BehaviorSubject<IData> = new BehaviorSubject<IData>({} as IData);\r\n\r\n  public data: Observable<IData> = this.emojis.asObservable();\r\n\r\n  constructor(private emojiPickerService: EmojiPickerService) {\r\n    this.getEmojis();\r\n  }\r\n\r\n  private getEmojis(): void {\r\n    this.emojiPickerService.getEmojis().then((data: IData) => this.emojis.next(data));\r\n  }\r\n\r\n  private isEmoji(item: string): boolean {\r\n    this.ctx.clearRect(0, 0, 4, 4);\r\n    this.ctx.fillText(item, -4, 4);\r\n    return this.ctx.getImageData(0, 0, 1, 1).data[1] > 0;\r\n  }\r\n\r\n  public checkEmojiSupport(data: IData): void {\r\n    if (this.ctx || !data.emojis) {\r\n      return;\r\n    }\r\n    this.ctx = document.createElement('canvas').getContext('2d');\r\n    this.ctx.canvas.width = 1;\r\n    this.ctx.canvas.height = 1;\r\n    data.emojis.forEach((element: IEmoji) => {\r\n      element.isSupported = this.isEmoji(element.emoji);\r\n    });\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {EmojisSharedService} from './@core/services/emojis.shared';\nimport {IData, IEmoji, IEmojiPickerOptions, ISelectedCategory} from './@core/interfaces/data.interface';\n\n@Component({\n  selector: 'emoji-picker',\n  templateUrl: './emoji-picker-lib.component.html'\n})\nexport class EmojiPickerLibComponent implements OnInit {\n  constructor(private emojisSharedService: EmojisSharedService) {\n  }\n\n  @Input() emojiPickerOptions: IEmojiPickerOptions;\n\n  @Output() selectEmojiEvent: EventEmitter<string> = new EventEmitter<string>();\n\n  public data: IData;\n  public selectedCategory: ISelectedCategory = {} as ISelectedCategory;\n\n  ngOnInit(): void {\n    this.initData();\n    this.getEmojis();\n  }\n\n  private initData(): void {\n    this.emojiPickerOptions = {\n      emojisPerRow: 9,\n      defaultCatalogId: 0\n    };\n  }\n\n  private getEmojis(): void {\n    this.emojisSharedService.data.subscribe(data => {\n      this.data = data;\n    });\n  }\n\n  private includesSearchValue(element: string): boolean {\n    return element.includes(this.emojiPickerOptions.searchValue.toLowerCase());\n  }\n\n  public showSelectedEmojis(index: number): void {\n    this.selectedCategory.category = this.data.categories[index];\n    this.selectedCategory.emojis = this.data.emojis.filter((emoji: IEmoji) => emoji.categoryId === this.selectedCategory.category.id);\n  }\n\n  public calcEmojiSize(count: number): string {\n    return `${100 / count}%`;\n  }\n\n  public selectEmoji(emoji: string): void {\n    this.selectEmojiEvent.emit(emoji);\n  }\n\n  public toggleEmojiPicker(): void {\n    try {\n      this.emojisSharedService.checkEmojiSupport(this.data);\n      this.showSelectedEmojis(this.emojiPickerOptions.defaultCatalogId);\n      this.emojiPickerOptions.showEmojiPicker = !this.emojiPickerOptions.showEmojiPicker;\n    } catch (error) {\n    }\n  }\n\n  public searchElement(): void {\n    if (this.emojiPickerOptions.searchValue) {\n      this.selectedCategory.emojis = this.data.emojis.filter((emoji: IEmoji) =>\n        emoji.keywords.some((key: string) => this.includesSearchValue(key.toLowerCase())) || this.includesSearchValue(emoji.name)\n      );\n    } else {\n      this.showSelectedEmojis(0);\n    }\n  }\n\n  public closeEmojiPicker(): void {\n    this.emojiPickerOptions.showEmojiPicker = false;\n    this.emojiPickerOptions.searchValue = '';\n  }\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Output} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[outClick]'\r\n})\r\nexport class OutClickDirective {\r\n  constructor(private elRef: ElementRef) {}\r\n  @Output() outClickEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  toggleOpen(event: any) {\r\n    if (!this.elRef.nativeElement.contains(event.target)) {\r\n      this.outClickEvent.emit();\r\n    }\r\n  }\r\n}\r\n","import {Directive, ElementRef, OnInit} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autofocus]'\r\n})\r\nexport class AutofocusDirective implements OnInit {\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.focusOnElement();\r\n  }\r\n\r\n  private focusOnElement(): void {\r\n    this.element.nativeElement.focus();\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\nimport {EmojiPickerService} from './emoji-picker-lib.service';\nimport {EmojisSharedService} from './@core/services/emojis.shared';\nimport {EmojiPickerLibComponent} from './emoji-picker-lib.component';\nimport {OutClickDirective} from './@theme/directives/outclick.directive';\nimport {AutofocusDirective} from './@theme/directives/autofocus.directive';\n\n@NgModule({\n  declarations: [\n    OutClickDirective,\n    AutofocusDirective,\n    EmojiPickerLibComponent\n  ],\n  imports: [\n    FormsModule,\n    CommonModule,\n  ],\n  exports: [\n    EmojiPickerLibComponent\n  ],\n  providers: [EmojiPickerService, EmojisSharedService]\n})\nexport class EmojiPickerLibModule {\n}\n","export interface IData {\r\n  categories: ICategory[];\r\n  emojis: IEmoji[];\r\n}\r\n\r\nexport interface ICategory {\r\n  id: number;\r\n  name: string;\r\n  emoji: string;\r\n  selected?: boolean;\r\n  emojis?: IEmoji[];\r\n}\r\n\r\nexport interface IEmoji {\r\n  id: number;\r\n  name: string;\r\n  emoji: string;\r\n  keywords: string[];\r\n  categoryId: number;\r\n  isSupported?: boolean;\r\n}\r\n\r\nexport interface IEmojiPickerOptions {\r\n  btnIcon?: string;\r\n  searchIcon?: string;\r\n  customClass?: string;\r\n  emojisPerRow?: number;\r\n  emojiPickerPosition?: string;\r\n  showEmojiPicker?: boolean;\r\n  searchValue?: string;\r\n  defaultCatalogId?: number;\r\n}\r\n\r\nexport interface ISelectedCategory {\r\n  category: ICategory;\r\n  emojis: IEmoji[];\r\n}\r\n"],"names":["Injectable","BehaviorSubject","EventEmitter","Component","Input","Output","Directive","ElementRef","HostListener","NgModule","FormsModule","CommonModule"],"mappings":";;;;;;;;;;AAAA;QAIA;SAKC;;;;QAHQ,sCAAS;;;QAAhB;YACE,OAAO,KAAK,CAAC,2BAA2B,CAAC,CAAC,IAAI;;;;YAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAE,GAAA,EAAC,CAAC;SACzE;;oBAJFA,eAAU;;QAKX,yBAAC;KALD;;;;;;ACJA;QAaE,6BAAoB,kBAAsC;YAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;YAJlD,WAAM,GAA2B,IAAIC,oBAAe,oBAAQ,EAAE,GAAU,CAAC;YAE1E,SAAI,GAAsB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAG1D,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;;;;;QAEO,uCAAS;;;;QAAjB;YAAA,iBAEC;YADC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,IAAI;;;;YAAC,UAAC,IAAW,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,EAAC,CAAC;SACnF;;;;;;QAEO,qCAAO;;;;;QAAf,UAAgB,IAAY;YAC1B,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACtD;;;;;QAEM,+CAAiB;;;;QAAxB,UAAyB,IAAW;YAApC,iBAUC;YATC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAC5B,OAAO;aACR;YACD,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,OAAO;;;;YAAC,UAAC,OAAe;gBAClC,OAAO,CAAC,WAAW,GAAG,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACnD,EAAC,CAAC;SACJ;;oBA/BFD,eAAU;;;;oBAFH,kBAAkB;;QAkC1B,0BAAC;KAhCD,IAgCC;;;;;;QA9BC,kCAAsC;;;;;QACtC,qCAAiF;;QAEjF,mCAA4D;;;;;QAEhD,iDAA8C;;;;;;;ACb5D;QAUE,iCAAoB,mBAAwC;YAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;YAKlD,qBAAgB,GAAyB,IAAIE,iBAAY,EAAU,CAAC;YAGvE,qBAAgB,sBAAsB,EAAE,EAAqB,CAAC;SAPpE;;;;QASD,0CAAQ;;;QAAR;YACE,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;;;;;QAEO,0CAAQ;;;;QAAhB;YACE,IAAI,CAAC,kBAAkB,GAAG;gBACxB,YAAY,EAAE,CAAC;gBACf,gBAAgB,EAAE,CAAC;aACpB,CAAC;SACH;;;;;QAEO,2CAAS;;;;QAAjB;YAAA,iBAIC;YAHC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS;;;;YAAC,UAAA,IAAI;gBAC1C,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aAClB,EAAC,CAAC;SACJ;;;;;;QAEO,qDAAmB;;;;;QAA3B,UAA4B,OAAe;YACzC,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;SAC5E;;;;;QAEM,oDAAkB;;;;QAAzB,UAA0B,KAAa;YAAvC,iBAGC;YAFC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;;;;YAAC,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,UAAU,KAAK,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,GAAA,EAAC,CAAC;SACnI;;;;;QAEM,+CAAa;;;;QAApB,UAAqB,KAAa;YAChC,OAAU,GAAG,GAAG,KAAK,MAAG,CAAC;SAC1B;;;;;QAEM,6CAAW;;;;QAAlB,UAAmB,KAAa;YAC9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnC;;;;QAEM,mDAAiB;;;QAAxB;YACE,IAAI;gBACF,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;gBAClE,IAAI,CAAC,kBAAkB,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC;aACpF;YAAC,OAAO,KAAK,EAAE;aACf;SACF;;;;QAEM,+CAAa;;;QAApB;YAAA,iBAQC;YAPC,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE;gBACvC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;;;;gBAAC,UAAC,KAAa;oBACnE,OAAA,KAAK,CAAC,QAAQ,CAAC,IAAI;;;;oBAAC,UAAC,GAAW,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAA,EAAC,IAAI,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC;iBAAA,EAC1H,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;aAC5B;SACF;;;;QAEM,kDAAgB;;;QAAvB;YACE,IAAI,CAAC,kBAAkB,CAAC,eAAe,GAAG,KAAK,CAAC;YAChD,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,EAAE,CAAC;SAC1C;;oBAxEFC,cAAS,SAAC;wBACT,QAAQ,EAAE,cAAc;wBACxB,qoFAAgD;qBACjD;;;;oBANO,mBAAmB;;;yCAWxBC,UAAK;uCAELC,WAAM;;QA+DT,8BAAC;KAzED,IAyEC;;;QAjEC,qDAAiD;;QAEjD,mDAA8E;;QAE9E,uCAAmB;;QACnB,mDAAqE;;;;;QARzD,sDAAgD;;;;;;;ACV9D;QAME,2BAAoB,KAAiB;YAAjB,UAAK,GAAL,KAAK,CAAY;YAC3B,kBAAa,GAAsB,IAAIH,iBAAY,EAAO,CAAC;SAD5B;;;;;QAIzC,sCAAU;;;;QADV,UACW,KAAU;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBACpD,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;aAC3B;SACF;;oBAZFI,cAAS,SAAC;wBACT,QAAQ,EAAE,YAAY;qBACvB;;;;oBAJkBC,eAAU;;;oCAO1BF,WAAM;iCAENG,iBAAY,SAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC;;QAM5C,wBAAC;KAbD,IAaC;;;QARC,0CAAqE;;;;;QADzD,kCAAyB;;;;;;;ACNvC;QAME,4BAAoB,OAAmB;YAAnB,YAAO,GAAP,OAAO,CAAY;SACtC;;;;QAED,qCAAQ;;;QAAR;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;;;;;QAEO,2CAAc;;;;QAAtB;YACE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SACpC;;oBAbFF,cAAS,SAAC;wBACT,QAAQ,EAAE,aAAa;qBACxB;;;;oBAJkBC,eAAU;;QAgB7B,yBAAC;KAdD,IAcC;;;;;;QAVa,qCAA2B;;;;;;;ACNzC;QAUA;SAgBC;;oBAhBAE,aAAQ,SAAC;wBACR,YAAY,EAAE;4BACZ,iBAAiB;4BACjB,kBAAkB;4BAClB,uBAAuB;yBACxB;wBACD,OAAO,EAAE;4BACPC,iBAAW;4BACXC,mBAAY;yBACb;wBACD,OAAO,EAAE;4BACP,uBAAuB;yBACxB;wBACD,SAAS,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;qBACrD;;QAED,2BAAC;KAhBD;;;;;;;;;ICVA,oBAGC;;;QAFC,2BAAwB;;QACxB,uBAAiB;;;;;IAGnB,wBAMC;;;QALC,uBAAW;;QACX,yBAAa;;QACb,0BAAc;;QACd,6BAAmB;;QACnB,2BAAkB;;;;;IAGpB,qBAOC;;;QANC,oBAAW;;QACX,sBAAa;;QACb,uBAAc;;QACd,0BAAmB;;QACnB,4BAAmB;;QACnB,6BAAsB;;;;;IAGxB,kCASC;;;QARC,sCAAiB;;QACjB,yCAAoB;;QACpB,0CAAqB;;QACrB,2CAAsB;;QACtB,kDAA6B;;QAC7B,8CAA0B;;QAC1B,0CAAqB;;QACrB,+CAA0B;;;;;IAG5B,gCAGC;;;QAFC,qCAAoB;;QACpB,mCAAiB;;;;;;;;;;;;;;;;;;"}