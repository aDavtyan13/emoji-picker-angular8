{"version":3,"sources":["ng://emoji-picker-lib/lib/emoji-picker-lib.service.ts","ng://emoji-picker-lib/lib/@core/services/emojis.shared.ts","ng://emoji-picker-lib/lib/emoji-picker-lib.component.ts","ng://emoji-picker-lib/lib/@theme/directives/outclick.directive.ts","ng://emoji-picker-lib/lib/@theme/directives/autofocus.directive.ts","ng://emoji-picker-lib/lib/emoji-picker-lib.module.ts"],"names":["EmojiPickerService","prototype","getEmojis","fetch","then","result","json","Injectable","EmojisSharedService","emojiPickerService","this","emojis","BehaviorSubject","data","asObservable","_this","next","isEmoji","item","ctx","clearRect","fillText","getImageData","checkEmojiSupport","document","createElement","getContext","canvas","width","height","forEach","element","isSupported","emoji","EmojiPickerLibComponent","emojisSharedService","selectEmojiEvent","EventEmitter","selectedCategory","ngOnInit","initData","emojiPickerOptions","emojisPerRow","defaultCatalogId","subscribe","includesSearchValue","includes","searchValue","toLowerCase","showSelectedEmojis","index","category","categories","filter","categoryId","id","calcEmojiSize","count","selectEmoji","emit","toggleEmojiPicker","showEmojiPicker","error","searchElement","keywords","some","key","name","closeEmojiPicker","Component","args","selector","template","Input","Output","OutClickDirective","elRef","outClickEvent","toggleOpen","event","nativeElement","contains","target","Directive","ElementRef","HostListener","AutofocusDirective","focusOnElement","focus","EmojiPickerLibModule","NgModule","declarations","imports","FormsModule","CommonModule","exports","providers"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {IData} from './@core/interfaces/data.interface';\n\n@Injectable()\nexport class EmojiPickerService {\n  public getEmojis(): Promise<IData> {\n    return fetch('./assets/data/emojis.json').then(result => result.json());\n  }\n}\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\n\r\nimport {IData, IEmoji} from '../interfaces/data.interface';\r\nimport {EmojiPickerService} from '../../emoji-picker-lib.service';\r\n\r\n@Injectable()\r\nexport class EmojisSharedService {\r\n  private ctx: CanvasRenderingContext2D;\r\n  private emojis: BehaviorSubject<IData> = new BehaviorSubject<IData>({} as IData);\r\n\r\n  public data: Observable<IData> = this.emojis.asObservable();\r\n\r\n  constructor(private emojiPickerService: EmojiPickerService) {\r\n    this.getEmojis();\r\n  }\r\n\r\n  private getEmojis(): void {\r\n    this.emojiPickerService.getEmojis().then((data: IData) => this.emojis.next(data));\r\n  }\r\n\r\n  private isEmoji(item: string): boolean {\r\n    this.ctx.clearRect(0, 0, 4, 4);\r\n    this.ctx.fillText(item, -4, 4);\r\n    return this.ctx.getImageData(0, 0, 1, 1).data[1] > 0;\r\n  }\r\n\r\n  public checkEmojiSupport(data: IData): void {\r\n    if (this.ctx || !data.emojis) {\r\n      return;\r\n    }\r\n    this.ctx = document.createElement('canvas').getContext('2d');\r\n    this.ctx.canvas.width = 1;\r\n    this.ctx.canvas.height = 1;\r\n    data.emojis.forEach((element: IEmoji) => {\r\n      element.isSupported = this.isEmoji(element.emoji);\r\n    });\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {EmojisSharedService} from './@core/services/emojis.shared';\nimport {IData, IEmoji, IEmojiPickerOptions, ISelectedCategory} from './@core/interfaces/data.interface';\n\n@Component({\n  selector: 'emoji-picker',\n  templateUrl: './emoji-picker-lib.component.html'\n})\nexport class EmojiPickerLibComponent implements OnInit {\n  constructor(private emojisSharedService: EmojisSharedService) {\n  }\n\n  @Input() emojiPickerOptions: IEmojiPickerOptions;\n\n  @Output() selectEmojiEvent: EventEmitter<string> = new EventEmitter<string>();\n\n  public data: IData;\n  public selectedCategory: ISelectedCategory = {} as ISelectedCategory;\n\n  ngOnInit(): void {\n    this.initData();\n    this.getEmojis();\n  }\n\n  private initData(): void {\n    this.emojiPickerOptions = {\n      emojisPerRow: 9,\n      defaultCatalogId: 0\n    };\n  }\n\n  private getEmojis(): void {\n    this.emojisSharedService.data.subscribe(data => {\n      this.data = data;\n    });\n  }\n\n  private includesSearchValue(element: string): boolean {\n    return element.includes(this.emojiPickerOptions.searchValue.toLowerCase());\n  }\n\n  public showSelectedEmojis(index: number): void {\n    this.selectedCategory.category = this.data.categories[index];\n    this.selectedCategory.emojis = this.data.emojis.filter((emoji: IEmoji) => emoji.categoryId === this.selectedCategory.category.id);\n  }\n\n  public calcEmojiSize(count: number): string {\n    return `${100 / count}%`;\n  }\n\n  public selectEmoji(emoji: string): void {\n    this.selectEmojiEvent.emit(emoji);\n  }\n\n  public toggleEmojiPicker(): void {\n    try {\n      this.emojisSharedService.checkEmojiSupport(this.data);\n      this.showSelectedEmojis(this.emojiPickerOptions.defaultCatalogId);\n      this.emojiPickerOptions.showEmojiPicker = !this.emojiPickerOptions.showEmojiPicker;\n    } catch (error) {\n    }\n  }\n\n  public searchElement(): void {\n    if (this.emojiPickerOptions.searchValue) {\n      this.selectedCategory.emojis = this.data.emojis.filter((emoji: IEmoji) =>\n        emoji.keywords.some((key: string) => this.includesSearchValue(key.toLowerCase())) || this.includesSearchValue(emoji.name)\n      );\n    } else {\n      this.showSelectedEmojis(0);\n    }\n  }\n\n  public closeEmojiPicker(): void {\n    this.emojiPickerOptions.showEmojiPicker = false;\n    this.emojiPickerOptions.searchValue = '';\n  }\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Output} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[outClick]'\r\n})\r\nexport class OutClickDirective {\r\n  constructor(private elRef: ElementRef) {}\r\n  @Output() outClickEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  toggleOpen(event: any) {\r\n    if (!this.elRef.nativeElement.contains(event.target)) {\r\n      this.outClickEvent.emit();\r\n    }\r\n  }\r\n}\r\n","import {Directive, ElementRef, OnInit} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autofocus]'\r\n})\r\nexport class AutofocusDirective implements OnInit {\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.focusOnElement();\r\n  }\r\n\r\n  private focusOnElement(): void {\r\n    this.element.nativeElement.focus();\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\nimport {EmojiPickerService} from './emoji-picker-lib.service';\nimport {EmojisSharedService} from './@core/services/emojis.shared';\nimport {EmojiPickerLibComponent} from './emoji-picker-lib.component';\nimport {OutClickDirective} from './@theme/directives/outclick.directive';\nimport {AutofocusDirective} from './@theme/directives/autofocus.directive';\n\n@NgModule({\n  declarations: [\n    OutClickDirective,\n    AutofocusDirective,\n    EmojiPickerLibComponent\n  ],\n  imports: [\n    FormsModule,\n    CommonModule,\n  ],\n  exports: [\n    EmojiPickerLibComponent\n  ],\n  providers: [EmojiPickerService, EmojisSharedService]\n})\nexport class EmojiPickerLibModule {\n}\n"]}