!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common"),require("rxjs")):"function"==typeof define&&define.amd?define("emoji-picker-lib",["exports","@angular/core","@angular/forms","@angular/common","rxjs"],t):t((e=e||self)["emoji-picker-lib"]={},e.ng.core,e.ng.forms,e.ng.common,e.rxjs)}(this,(function(e,t,i,o,n){"use strict";var r=function(){function e(){}return e.prototype.getEmojis=function(){return fetch("./assets/data/emojis.json").then((function(e){return e.json()}))},e.decorators=[{type:t.Injectable}],e}(),c=function(){function e(e){this.emojiPickerService=e,this.emojis=new n.BehaviorSubject({}),this.data=this.emojis.asObservable(),this.getEmojis()}return e.prototype.getEmojis=function(){var e=this;this.emojiPickerService.getEmojis().then((function(t){return e.emojis.next(t)}))},e.prototype.isEmoji=function(e){return this.ctx.clearRect(0,0,4,4),this.ctx.fillText(e,-4,4),this.ctx.getImageData(0,0,1,1).data[1]>0},e.prototype.checkEmojiSupport=function(e){var t=this;!this.ctx&&e.emojis&&(this.ctx=document.createElement("canvas").getContext("2d"),this.ctx.canvas.width=1,this.ctx.canvas.height=1,e.emojis.forEach((function(e){e.isSupported=t.isEmoji(e.emoji)})))},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:r}]},e}();var s=function(){function e(e){this.emojisSharedService=e,this.selectEmojiEvent=new t.EventEmitter,this.selectedCategory={}}return e.prototype.ngOnInit=function(){this.initData(),this.getEmojis()},e.prototype.initData=function(){this.emojiPickerOptions={emojisPerRow:9,defaultCatalogId:0}},e.prototype.getEmojis=function(){var e=this;this.emojisSharedService.data.subscribe((function(t){e.data=t}))},e.prototype.includesSearchValue=function(e){return e.includes(this.emojiPickerOptions.searchValue.toLowerCase())},e.prototype.showSelectedEmojis=function(e){var t=this;this.selectedCategory.category=this.data.categories[e],this.selectedCategory.emojis=this.data.emojis.filter((function(e){return e.categoryId===t.selectedCategory.category.id}))},e.prototype.calcEmojiSize=function(e){return 100/e+"%"},e.prototype.selectEmoji=function(e){this.selectEmojiEvent.emit(e)},e.prototype.toggleEmojiPicker=function(){try{this.emojisSharedService.checkEmojiSupport(this.data),this.showSelectedEmojis(this.emojiPickerOptions.defaultCatalogId),this.emojiPickerOptions.showEmojiPicker=!this.emojiPickerOptions.showEmojiPicker}catch(e){}},e.prototype.searchElement=function(){var e=this;this.emojiPickerOptions.searchValue?this.selectedCategory.emojis=this.data.emojis.filter((function(t){return t.keywords.some((function(t){return e.includesSearchValue(t.toLowerCase())}))||e.includesSearchValue(t.name)})):this.showSelectedEmojis(0)},e.prototype.closeEmojiPicker=function(){this.emojiPickerOptions.showEmojiPicker=!1,this.emojiPickerOptions.searchValue=""},e.decorators=[{type:t.Component,args:[{selector:"emoji-picker",template:'<div class="emoji-picker" outClick (outClickEvent)="closeEmojiPicker()"\r\n     [ngClass]="emojiPickerOptions?.customClass ? emojiPickerOptions?.customClass : \'\'">\r\n  <button type="button" class="emoji-picker--icon--btn"\r\n          (click)="toggleEmojiPicker()"\r\n          [ngClass]="{\'active\': emojiPickerOptions?.showEmojiPicker}">\r\n    <ng-container *ngIf="emojiPickerOptions?.btnIcon; else btnIconImg">\r\n      <span class="{{emojiPickerOptions?.btnIcon}} emoji-picker--icon"></span>\r\n    </ng-container>\r\n    <ng-template #btnIconImg>\r\n      <img src="assets/images/emoji.svg" alt="" class="emoji-picker--icon--img">\r\n    </ng-template>\r\n  </button>\r\n  <div *ngIf="emojiPickerOptions?.showEmojiPicker"\r\n       [ngClass]="emojiPickerOptions?.emojiPickerPosition ? \'emoji-picker--block--\' + emojiPickerOptions.emojiPickerPosition : \'\'"\r\n       class="emoji-picker--block">\r\n    <div class="emoji-picker--categories">\r\n      <div class="emoji-picker--category"\r\n           *ngFor="let category of data?.categories; let i = index;"\r\n           (click)="showSelectedEmojis(i)"\r\n           [ngClass]="{\'selected\': selectedCategory?.category.id === category.id && !emojiPickerOptions.searchValue}"\r\n           [ngStyle]="{\'width\': calcEmojiSize(data.categories.length)}">\r\n        <div>{{category?.emoji}}</div>\r\n      </div>\r\n    </div>\r\n    <div class="emoji-picker--search">\r\n      <input type="text" placeholder="Search" [(ngModel)]="emojiPickerOptions.searchValue" (input)="searchElement()" autofocus>\r\n      <ng-container *ngIf="emojiPickerOptions?.searchIcon; else searchIconImg">\r\n        <span class="{{emojiPickerOptions?.searchIcon}} emoji-picker--icon"></span>\r\n      </ng-container>\r\n      <ng-template #searchIconImg>\r\n        <img src="assets/images/search.svg" class="emoji-picker--icon--img" alt="">\r\n      </ng-template>\r\n    </div>\r\n    <p *ngIf="!emojiPickerOptions.searchValue" class="emoji-picker--category-name">{{selectedCategory?.category.name}}</p>\r\n    <div class="emoji-picker--emojis"\r\n         [ngClass]="{\'emoji-picker--emojis--full-height\': emojiPickerOptions.searchValue}">\r\n      <ng-container *ngFor="let emoji of selectedCategory?.emojis">\r\n        <div *ngIf="emoji.isSupported" class="emoji-picker--emoji"\r\n             (click)="selectEmoji(emoji.emoji)"\r\n             [ngStyle]="{\'width\': calcEmojiSize(emojiPickerOptions?.emojisPerRow)}">\r\n          <div title="{{emoji?.name}}">{{emoji?.emoji}}</div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n'}]}],e.ctorParameters=function(){return[{type:c}]},e.propDecorators={emojiPickerOptions:[{type:t.Input}],selectEmojiEvent:[{type:t.Output}]},e}();var a=function(){function e(e){this.elRef=e,this.outClickEvent=new t.EventEmitter}return e.prototype.toggleOpen=function(e){this.elRef.nativeElement.contains(e.target)||this.outClickEvent.emit()},e.decorators=[{type:t.Directive,args:[{selector:"[outClick]"}]}],e.ctorParameters=function(){return[{type:t.ElementRef}]},e.propDecorators={outClickEvent:[{type:t.Output}],toggleOpen:[{type:t.HostListener,args:["document:click",["$event"]]}]},e}();var m=function(){function e(e){this.element=e}return e.prototype.ngOnInit=function(){this.focusOnElement()},e.prototype.focusOnElement=function(){this.element.nativeElement.focus()},e.decorators=[{type:t.Directive,args:[{selector:"[autofocus]"}]}],e.ctorParameters=function(){return[{type:t.ElementRef}]},e}();var l=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[a,m,s],imports:[i.FormsModule,o.CommonModule],exports:[s],providers:[r,c]}]}],e}();e.EmojiPickerLibComponent=s,e.EmojiPickerLibModule=l,e.EmojiPickerService=r,e.ɵa=a,e.ɵb=m,e.ɵc=c,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=emoji-picker-lib.umd.min.js.map